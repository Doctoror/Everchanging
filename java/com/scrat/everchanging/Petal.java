package com.scrat.everchanging;

import android.content.Context;

import com.scrat.everchanging.util.ReusableIterator;

import java.util.ArrayList;

final class Petal extends TextureObject {

    private static final String[][] textureList = {
            {
                    "shape_225", "shape_226", "shape_227", "shape_228", "shape_229", "shape_230",
                    "shape_232", "shape_233", "shape_234", "shape_235", "shape_236", "shape_237",
                    "shape_238", "shape_239", "shape_240", "shape_241"
            }
    };

    private static final float[][] pivotList = {
            {23.45f, 13.55f}, {24.75f, 8.9f}, {24.25f, 3.55f}, {23.5f, 8.65f}, {24.75f, 8.9f},
            {25.55f, 15.8f}, {24.05f, 12.1f}, {23.25f, 8.95f}, {15.25f, 20.75f}, {7.45f, 7.35f},
            {13.2f, 17.85f}, {14.45f, 14.95f}, {14.45f, 6.7f}, {14.45f, 23.1f}, {8.9f, 24.35f},
            {16.75f, 18.9f}
    };

    private static final float[][] startMatrixTransform = {
            {-0.2121f, -0.2121f, -0.2121f, 0.2121f, 6.5f, -21.25f}, //Frame 1
            {0.3f, 0.3f, 0.0000f, 0.0000f, 2.95f, 16.55f},          //Frame 4
            {-0.3f, 0.3f, 0.0000f, 0.0000f, -31.1f, 1.5f},          //Frame 8
            {0.3f, 0.3f, 0.0000f, 0.0000f, 28.1f, -22.5f},          //Frame 14
    };

    private static final float[][] startColorTransform = {{141, 141, 141, 256}, {106, 96, 13, 0}};

    private static final float[][][] matrixTransform = {
            {
                    {0.25f, 0.25f, 0f, 0f, -19.35f, -28.3f},
                    {0.335f, 0.335f, 0f, 0f, -49.25f, -22.6f},
                    {0.415f, 0.415f, 0f, 0f, -77.4f, -14.1f},
                    {0.49f, 0.49f, 0f, 0f, -102.4f, -4.15f},
                    {0.56f, 0.56f, 0f, 0f, -122.65f, 9f},
                    {0.625f, 0.625f, 0f, 0f, -129.5f, 29.7f},
                    {0.685f, 0.685f, 0f, 0f, -114.95f, 46.4f},
                    {0.555f, 0.555f, 0f, 0f, -102.3f, 55.95f},
                    {-0.3807f, -0.3319f, 0.4525f, -0.3971f, -85.4f, 62.1f},
                    {-0.1067f, -0.08157f, -0.6164f, 0.4623f, -69.6f, 65.85f},
                    {0.5668f, 0.3552f, 0.3279f, -0.2039f, -55.5f, 68.2f},
                    {-0.6407f, -0.3207f, 0.2332f, -0.1167f, -43.15f, 69.7f},
                    {-0.4388f, -0.2635f, 0.5497f, -0.3301f, -32.65f, 70.65f},
                    {-0.08878f, -0.06218f, 0.7175f, -0.5026f, -23.8f, 71.2f},
                    {0.3009f, 0.2409f, 0.6733f, -0.5389f, -16.85f, 71.5f},
                    {0.6182f, 0.5565f, 0.4224f, -0.3802f, -11.6f, 71.8f},
                    {0.7437f, 0.7437f, 0.03899f, -0.03897f, -6.35f, 71.95f},
                    {0.9837f, 0.9837f, 0f, 0f, 5.2f, 72.3f},
                    {0.972f, 0.972f, 0f, 0f, 15.1f, 72.3f},
                    {0.958f, 0.958f, 0f, 0f, 23.7f, 72.1f},
                    {0.9417f, 0.9417f, 0f, 0f, 35.5f, 71.45f},
                    {0.923f, 0.923f, 0f, 0f, 48.9f, 69.95f},
                    {0.902f, 0.902f, 0f, 0f, 63.9f, 67.15f},
                    {0.8787f, 0.8787f, 0f, 0f, 81.25f, 61.35f},
                    {0.6398f, 0.6398f, 0f, 0f, 90.6f, 50.1f},
                    {-0.3976f, -0.3466f, 0.4725f, -0.4147f, 95.85f, 30.8f},
                    {-0.1015f, -0.07762f, -0.5866f, 0.44f, 84.8f, 11.15f},
                    {0.4936f, 0.3093f, 0.2855f, -0.1776f, 66.45f, -4.75f},
                    {-0.5118f, -0.2562f, 0.1863f, -0.09326f, 43.4f, -16.8f},
                    {-0.3219f, -0.1933f, 0.4033f, -0.2422f, 16.95f, -24.85f},
                    {-0.0598f, -0.04189f, 0.4833f, -0.3385f, -12.15f, -28.5f},
                    {0.2107f, 0.1687f, 0.4715f, -0.3773f, -42.6f, -25.1f},
                    {0.4494f, 0.4045f, 0.3071f, -0.2764f, -70.3f, -17.9f},
                    {0.5707f, 0.5707f, 0.02992f, -0.02991f, -95.65f, -8.8f},
                    {0.7947f, 0.7947f, 0f, 0f, -113.65f, 1.8f},
                    {0.825f, 0.825f, 0f, 0f, -127.6f, 17.4f},
                    {0.853f, 0.853f, 0f, 0f, -126.05f, 37.4f},
                    {0.8787f, 0.8787f, 0f, 0f, -110.8f, 50.1f},
                    {0.902f, 0.902f, 0f, 0f, -94.9f, 58f},
                    {0.923f, 0.923f, 0f, 0f, -79.6f, 62.95f},
                    {0.9417f, 0.9417f, 0f, 0f, -64.15f, 66.15f},
                    {0.7185f, 0.7185f, 0f, 0f, -58f, 68f},
                    {-0.4685f, -0.4084f, 0.5568f, -0.4886f, -47.45f, 69.35f},
                    {-0.1257f, -0.0961f, -0.7262f, 0.5446f, -38.85f, 70.25f},
                    {0.6432f, 0.4031f, 0.3721f, -0.2314f, -31.85f, 70.8f},
                    {-0.704f, -0.3524f, 0.2562f, -0.1283f, -26.65f, 71.1f},
                    {-0.4597f, -0.2761f, 0.576f, -0.3459f, -21.5f, 71.4f},
                    {-0.08879f, -0.06218f, 0.7175f, -0.5026f, -14.5f, 71.7f},
                    {0.2872f, 0.2299f, 0.6426f, -0.5143f, -5.9f, 71.9f},
                    {0.5625f, 0.5064f, 0.3844f, -0.346f, 4.3f, 72.1f},
                    {0.6553f, 0.6553f, 0.03435f, -0.03433f, 16f, 72f},
                    {0.835f, 0.835f, 0f, 0f, 33.55f, 71.55f},
                    {0.79f, 0.79f, 0f, 0f, 49.55f, 70f},
                    {0.74f, 0.74f, 0f, 0f, 64.75f, 66.9f},
                    {0.685f, 0.685f, 0f, 0f, 82f, 60.5f},
                    {0.625f, 0.625f, 0f, 0f, 97.05f, 47.6f},
                    {0.56f, 0.56f, 0f, 0f, 98.8f, 26.4f},
                    {0.49f, 0.49f, 0f, 0f, 85.8f, 6.95f},
                    {0.3112f, 0.3112f, 0f, 0f, 62.4f, -8.55f},
                    {-0.1615f, -0.1408f, 0.1919f, -0.1684f, 38.05f, -19.75f},
                    {-0.03194f, -0.02441f, -0.1846f, 0.1384f, 10.3f, -26.6f}
            },
            {
                    {0.25f, 0.25f, 0f, 0f, -115.3f, 44.75f},
                    {0.2559f, 0.2559f, 0f, 0f, -109.8f, 48.2f},
                    {0.2621f, 0.2621f, 0f, 0f, -103.6f, 50.2f},
                    {0.2686f, 0.2686f, 0f, 0f, -97.05f, 52.25f},
                    {0.2755f, 0.2755f, 0f, 0f, -90.15f, 54.3f},
                    {0.2825f, 0.2825f, 0f, 0f, -82.9f, 56.4f},
                    {0.2899f, 0.2899f, 0f, 0f, -75.25f, 58.3f},
                    {0.2976f, 0.2976f, 0f, 0f, -67.2f, 60.15f},
                    {0.3056f, 0.3056f, 0f, 0f, -58.75f, 61.5f},
                    {0.3139f, 0.3139f, 0f, 0f, -49.85f, 62.5f},
                    {0.3225f, 0.3225f, 0f, 0f, -40.6f, 63.05f},
                    {0.3314f, 0.3314f, 0f, 0f, -31.1f, 62.95f},
                    {0.3405f, 0.3405f, 0f, 0f, -21.5f, 62.15f},
                    {0.35f, 0.35f, 0f, 0f, -11.75f, 60.2f},
                    {0.3598f, 0.3598f, 0f, 0f, -2.1f, 56.45f},
                    {0.3698f, 0.3698f, 0f, 0f, 6.55f, 50.05f},
                    {0.3802f, 0.3802f, 0f, 0f, 12.9f, 40.85f},
                    {0.3908f, 0.3908f, 0f, 0f, 16.55f, 29.75f},
                    {0.4018f, 0.4018f, 0f, 0f, 17.9f, 17.9f},
                    {0.413f, 0.413f, 0f, 0f, 17.4f, 5.9f},
                    {0.4246f, 0.4246f, 0f, 0f, 14.1f, -6.05f},
                    {0.4364f, 0.4364f, 0f, 0f, 7.9f, -17.25f},
                    {0.4485f, 0.4485f, 0f, 0f, -0.75f, -26.95f},
                    {0.461f, 0.461f, 0f, 0f, -11.45f, -35.1f},
                    {0.4737f, 0.4737f, 0f, 0f, -23.5f, -41.6f},
                    {0.4867f, 0.4867f, 0f, 0f, -36.8f, -46.4f},
                    {0.5f, 0.5f, 0f, 0f, -50.9f, -49.45f},
                    {0.5136f, 0.5136f, 0f, 0f, -65.6f, -50.8f},
                    {0.5275f, 0.5275f, 0f, 0f, -80.45f, -50.4f},
                    {0.5417f, 0.5417f, 0f, 0f, -95.05f, -46.6f},
                    {0.5562f, 0.5562f, 0f, 0f, -107.6f, -37.8f},
                    {0.571f, 0.571f, 0f, 0f, -112.8f, -23.1f},
                    {0.5861f, 0.5861f, 0f, 0f, -104.8f, -9f},
                    {0.6015f, 0.6015f, 0f, 0f, -92.15f, 1.9f},
                    {0.6172f, 0.6172f, 0f, 0f, -77.95f, 10.95f},
                    {0.6331f, 0.6331f, 0f, 0f, -62.35f, 17.85f},
                    {0.6494f, 0.6494f, 0f, 0f, -45.4f, 19.9f},
                    {0.666f, 0.666f, 0f, 0f, -29.45f, 13.1f},
                    {0.6828f, 0.6828f, 0f, 0f, -25.05f, -3.45f},
                    {0.7f, 0.7f, 0f, 0f, -39.05f, -15.5f},
                    {0.7f, 0.7f, 0f, 0f, -39.05f, -15.5f},
                    {0.7144f, 0.7144f, 0f, 0f, -55.65f, -17.3f},
                    {0.7284f, 0.7284f, 0f, 0f, -71.8f, -19.35f},
                    {0.7421f, 0.7421f, 0f, 0f, -87.6f, -21.5f},
                    {0.7556f, 0.7556f, 0f, 0f, -103.05f, -23.8f},
                    {0.7687f, 0.7687f, 0f, 0f, -118.1f, -26.2f},
                    {0.7815f, 0.7815f, 0f, 0f, -132.7f, -28.65f},
                    {0.794f, 0.794f, 0f, 0f, -146.85f, -30.75f},
                    {0.8061f, 0.8061f, 0f, 0f, -160.55f, -32.35f},
                    {0.818f, 0.818f, 0f, 0f, -174.1f, -33.45f},
                    {0.8296f, 0.8296f, 0f, 0f, -187.5f, -33.55f},
                    {0.8408f, 0.8408f, 0f, 0f, -200.35f, -30.35f},
                    {0.8517f, 0.8517f, 0f, 0f, -211.85f, -25.25f},
                    {0.8623f, 0.8623f, 0f, 0f, -217.6f, -17.3f},
                    {0.8726f, 0.8726f, 0f, 0f, -205.9f, -13.15f},
                    {0.8826f, 0.8826f, 0f, 0f, -193.55f, -11.7f},
                    {0.8923f, 0.8923f, 0f, 0f, -181.7f, -10.45f},
                    {0.9017f, 0.9017f, 0f, 0f, -170.75f, -9.4f},
                    {0.9107f, 0.9107f, 0f, 0f, -160.45f, -8.2f},
                    {0.9195f, 0.9195f, 0f, 0f, -150.65f, -6.7f},
                    {0.9279f, 0.9279f, 0f, 0f, -141.25f, -4.5f},
                    {0.936f, 0.936f, 0f, 0f, -132.8f, -0.95f},
                    {0.9438f, 0.9438f, 0f, 0f, -127.25f, 5.75f},
                    {0.9513f, 0.9513f, 0f, 0f, -130.15f, 13.35f},
                    {0.9585f, 0.9585f, 0f, 0f, -138.3f, 16.05f},
                    {0.9653f, 0.9653f, 0f, 0f, -146.25f, 17.45f},
                    {0.9719f, 0.9719f, 0f, 0f, -153.3f, 19.55f},
                    {0.9781f, 0.9781f, 0f, 0f, -157.75f, 24.8f},
                    {0.9841f, 0.9841f, 0f, 0f, -155.95f, 31.25f},
                    {0.9897f, 0.9897f, 0f, 0f, -150.45f, 35f},
                    {0.995f, 0.995f, 0f, 0f, -144.65f, 37.1f},
                    {1.0f, 1.0f, 0f, 0f, -138.9f, 38.25f},
                    {1.0f, 1.0f, 0f, 0f, -120.8f, 44.95f},
                    {0.9912f, 0.9912f, 0f, 0f, -107.25f, 49.25f},
                    {0.9823f, 0.9823f, 0f, 0f, -93.8f, 53.45f},
                    {0.9735f, 0.9735f, 0f, 0f, -80.15f, 57.25f},
                    {0.9647f, 0.9647f, 0f, 0f, -66.25f, 60.45f},
                    {0.9559f, 0.9559f, 0f, 0f, -51.95f, 62.45f},
                    {0.9471f, 0.9471f, 0f, 0f, -37.55f, 63.2f},
                    {0.9382f, 0.9382f, 0f, 0f, -23.4f, 62.55f},
                    {0.9294f, 0.9294f, 0f, 0f, -9.6f, 59.75f},
                    {0.9206f, 0.9206f, 0f, 0f, 3.05f, 53.4f},
                    {0.9118f, 0.9118f, 0f, 0f, 12.25f, 42.35f},
                    {0.9029f, 0.9029f, 0f, 0f, 16.85f, 28.45f},
                    {0.8941f, 0.8941f, 0f, 0f, 18f, 13.95f},
                    {0.8853f, 0.8853f, 0f, 0f, 16.05f, -0.25f},
                    {0.8765f, 0.8765f, 0f, 0f, 10.3f, -13.45f},
                    {0.8676f, 0.8676f, 0f, 0f, 1.4f, -24.8f},
                    {0.8588f, 0.8588f, 0f, 0f, -9.8f, -33.9f},
                    {0.85f, 0.85f, 0f, 0f, -22.35f, -41f},
                    {0.8412f, 0.8412f, 0f, 0f, -36f, -46.1f},
                    {0.8324f, 0.8324f, 0f, 0f, -50.15f, -49.25f},
                    {0.8235f, 0.8235f, 0f, 0f, -64.55f, -50.65f},
                    {0.8147f, 0.8147f, 0f, 0f, -78.9f, -50.45f},
                    {0.8059f, 0.8059f, 0f, 0f, -92.8f, -47.4f},
                    {0.7971f, 0.7971f, 0f, 0f, -105.1f, -40.3f},
                    {0.7882f, 0.7882f, 0f, 0f, -112.3f, -28.2f},
                    {0.7794f, 0.7794f, 0f, 0f, -109.35f, -14.4f},
                    {0.7706f, 0.7706f, 0f, 0f, -99.45f, -3.75f},
                    {0.7618f, 0.7618f, 0f, 0f, -87.85f, 5f},
                    {0.7529f, 0.7529f, 0f, 0f, -75.55f, 12.3f},
                    {0.7441f, 0.7441f, 0f, 0f, -62.4f, 17.9f},
                    {0.7353f, 0.7353f, 0f, 0f, -48.5f, 20.15f},
                    {0.7265f, 0.7265f, 0f, 0f, -34.75f, 17.05f},
                    {0.7177f, 0.7177f, 0f, 0f, -25.3f, 6.65f},
                    {0.7088f, 0.7088f, 0f, 0f, -26.9f, -7.05f},
                    {0.7f, 0.7f, 0f, 0f, -39.05f, -15.5f},
                    {0.7f, 0.7f, 0f, 0f, -39.05f, -15.5f},
                    {0.6927f, 0.6927f, 0f, 0f, -44.65f, -16.1f},
                    {0.6851f, 0.6851f, 0f, 0f, -50.5f, -16.7f},
                    {0.6769f, 0.6769f, 0f, 0f, -56.8f, -17.45f},
                    {0.6684f, 0.6684f, 0f, 0f, -63.35f, -18.25f},
                    {0.6593f, 0.6593f, 0f, 0f, -70.3f, -19.15f},
                    {0.6499f, 0.6499f, 0f, 0f, -77.55f, -20.1f},
                    {0.64f, 0.64f, 0f, 0f, -85.1f, -21.15f},
                    {0.6297f, 0.6297f, 0f, 0f, -93.05f, -22.25f},
                    {0.6189f, 0.6189f, 0f, 0f, -101.3f, -23.5f},
                    {0.6077f, 0.6077f, 0f, 0f, -109.85f, -24.9f},
                    {0.5961f, 0.5961f, 0f, 0f, -118.8f, -26.4f},
                    {0.584f, 0.584f, 0f, 0f, -128f, -28.05f},
                    {0.5715f, 0.5715f, 0f, 0f, -137.45f, -29.45f},
                    {0.5585f, 0.5585f, 0f, 0f, -147.2f, -30.8f},
                    {0.5451f, 0.5451f, 0f, 0f, -157.3f, -32.05f},
                    {0.5313f, 0.5313f, 0f, 0f, -167.8f, -33.05f},
                    {0.517f, 0.517f, 0f, 0f, -178.7f, -33.75f},
                    {0.5022f, 0.5022f, 0f, 0f, -190.1f, -33.25f},
                    {0.4871f, 0.4871f, 0f, 0f, -201.6f, -30f},
                    {0.4715f, 0.4715f, 0f, 0f, -212.5f, -25f},
                    {0.4554f, 0.4554f, 0f, 0f, -216.95f, -16.9f},
                    {0.439f, 0.439f, 0f, 0f, -204.25f, -13f},
                    {0.422f, 0.422f, 0f, 0f, -190.25f, -11.5f},
                    {0.4047f, 0.4047f, 0f, 0f, -176.3f, -10.1f},
                    {0.3869f, 0.3869f, 0f, 0f, -162.7f, -8.65f},
                    {0.3687f, 0.3687f, 0f, 0f, -149.05f, -6.5f},
                    {0.35f, 0.35f, 0f, 0f, -135.45f, -2.5f},
                    {0.3309f, 0.3309f, 0f, 0f, -127.05f, 8.2f},
                    {0.3113f, 0.3113f, 0f, 0f, -139.1f, 16f},
                    {0.2913f, 0.2913f, 0f, 0f, -153.9f, 19.6f},
                    {0.2709f, 0.2709f, 0f, 0f, -154.2f, 32.7f},
                    {0.25f, 0.25f, 0f, 0f, -138.9f, 38.05f}
            }
    };

    private final String[][] spritesAnimation = {
            {
                    "shape_225", "shape_226", "shape_227", "shape_228", "shape_228", "shape_227", "shape_229", "shape_230", "shape_230", "shape_230",
                    "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_225", "shape_226", "shape_227",
                    "shape_228", "shape_228", "shape_227", "shape_229", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230",
                    "shape_230", "shape_230", "shape_230", "shape_230", "shape_225", "shape_226", "shape_227", "shape_228", "shape_228", "shape_227",
                    "shape_229", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230", "shape_230",
                    "shape_230", "shape_225", "shape_226", "shape_227", "shape_228", "shape_228", "shape_227", "shape_229", "shape_230", "shape_230",
                    "shape_230"
            },
            {
                    "shape_225", "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238",
                    "shape_239", "shape_240", "shape_241", "shape_225", "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235",
                    "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241", "shape_225", "shape_232", "shape_233", "shape_227",
                    "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241", "shape_225",
                    "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241", "shape_225",
                    "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238", "shape_239",
                    "shape_240", "shape_241", "shape_225", "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235", "shape_236",
                    "shape_237", "shape_238", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241",
                    "shape_225", "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238",
                    "shape_239", "shape_240", "shape_241", "shape_225", "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235",
                    "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241", "shape_225", "shape_228", "shape_234", "shape_235",
                    "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241", "shape_225", "shape_232", "shape_233", "shape_227",
                    "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238", "shape_239", "shape_240", "shape_241", "shape_225",
                    "shape_232", "shape_233", "shape_227", "shape_228", "shape_234", "shape_235", "shape_236", "shape_237", "shape_238", "shape_239"
            }
    };

    private static final float[][][][] colorTransform = {
            {
                    //{redMultiTerm, greenMultiTerm, blueMultiTerm, alphaMultiTerm},{redAddTerm, greenAddTerm, blueAddTerm, alphaAddTerm}
                    {{256, 256, 256, 0}, {0, 0, 0, 0}}, {{256, 256, 256, 29}, {0, 0, 0, 0}}, {{256, 256, 256, 56}, {0, 0, 0, 0}}, {{256, 256, 256, 82}, {0, 0, 0, 0}},
                    {{256, 256, 256, 106}, {0, 0, 0, 0}}, {{256, 256, 256, 128}, {0, 0, 0, 0}}, {{256, 256, 256, 148}, {0, 0, 0, 0}}, {{256, 256, 256, 167}, {0, 0, 0, 0}},
                    {{256, 256, 256, 184}, {0, 0, 0, 0}}, {{256, 256, 256, 200}, {0, 0, 0, 0}}, {{256, 256, 256, 213}, {0, 0, 0, 0}}, {{256, 256, 256, 225}, {0, 0, 0, 0}},
                    {{256, 256, 256, 236}, {0, 0, 0, 0}}, {{256, 256, 256, 244}, {0, 0, 0, 0}}, {{256, 256, 256, 251}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 251}, {0, 0, 0, 0}}, {{256, 256, 256, 244}, {0, 0, 0, 0}},
                    {{256, 256, 256, 236}, {0, 0, 0, 0}}, {{256, 256, 256, 225}, {0, 0, 0, 0}}, {{256, 256, 256, 213}, {0, 0, 0, 0}}, {{256, 256, 256, 200}, {0, 0, 0, 0}},
                    {{256, 256, 256, 184}, {0, 0, 0, 0}}, {{256, 256, 256, 167}, {0, 0, 0, 0}}, {{256, 256, 256, 148}, {0, 0, 0, 0}}, {{256, 256, 256, 128}, {0, 0, 0, 0}},
                    {{256, 256, 256, 106}, {0, 0, 0, 0}}, {{256, 256, 256, 82}, {0, 0, 0, 0}}, {{256, 256, 256, 56}, {0, 0, 0, 0}}, {{256, 256, 256, 29}, {0, 0, 0, 0}},
                    {{256, 256, 256, 0}, {0, 0, 0, 0}}
            },
            {
                    {{256, 256, 256, 0}, {0, 0, 0, 0}}, {{256, 256, 256, 3}, {0, 0, 0, 0}}, {{256, 256, 256, 7}, {0, 0, 0, 0}}, {{256, 256, 256, 11}, {0, 0, 0, 0}},
                    {{256, 256, 256, 14}, {0, 0, 0, 0}}, {{256, 256, 256, 19}, {0, 0, 0, 0}}, {{256, 256, 256, 23}, {0, 0, 0, 0}}, {{256, 256, 256, 27}, {0, 0, 0, 0}},
                    {{256, 256, 256, 32}, {0, 0, 0, 0}}, {{256, 256, 256, 36}, {0, 0, 0, 0}}, {{256, 256, 256, 41}, {0, 0, 0, 0}}, {{256, 256, 256, 46}, {0, 0, 0, 0}},
                    {{256, 256, 256, 52}, {0, 0, 0, 0}}, {{256, 256, 256, 57}, {0, 0, 0, 0}}, {{256, 256, 256, 62}, {0, 0, 0, 0}}, {{256, 256, 256, 68}, {0, 0, 0, 0}},
                    {{256, 256, 256, 74}, {0, 0, 0, 0}}, {{256, 256, 256, 80}, {0, 0, 0, 0}}, {{256, 256, 256, 86}, {0, 0, 0, 0}}, {{256, 256, 256, 93}, {0, 0, 0, 0}},
                    {{256, 256, 256, 99}, {0, 0, 0, 0}}, {{256, 256, 256, 106}, {0, 0, 0, 0}}, {{256, 256, 256, 113}, {0, 0, 0, 0}}, {{256, 256, 256, 120}, {0, 0, 0, 0}},
                    {{256, 256, 256, 127}, {0, 0, 0, 0}}, {{256, 256, 256, 135}, {0, 0, 0, 0}}, {{256, 256, 256, 142}, {0, 0, 0, 0}}, {{256, 256, 256, 150}, {0, 0, 0, 0}},
                    {{256, 256, 256, 158}, {0, 0, 0, 0}}, {{256, 256, 256, 166}, {0, 0, 0, 0}}, {{256, 256, 256, 174}, {0, 0, 0, 0}}, {{256, 256, 256, 183}, {0, 0, 0, 0}},
                    {{256, 256, 256, 191}, {0, 0, 0, 0}}, {{256, 256, 256, 200}, {0, 0, 0, 0}}, {{256, 256, 256, 209}, {0, 0, 0, 0}}, {{256, 256, 256, 218}, {0, 0, 0, 0}},
                    {{256, 256, 256, 227}, {0, 0, 0, 0}}, {{256, 256, 256, 237}, {0, 0, 0, 0}}, {{256, 256, 256, 246}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}}, {{256, 256, 256, 256}, {0, 0, 0, 0}},
                    {{256, 256, 256, 252}, {0, 0, 0, 0}}, {{256, 256, 256, 248}, {0, 0, 0, 0}}, {{256, 256, 256, 243}, {0, 0, 0, 0}}, {{256, 256, 256, 238}, {0, 0, 0, 0}},
                    {{256, 256, 256, 233}, {0, 0, 0, 0}}, {{256, 256, 256, 228}, {0, 0, 0, 0}}, {{256, 256, 256, 222}, {0, 0, 0, 0}}, {{256, 256, 256, 216}, {0, 0, 0, 0}},
                    {{256, 256, 256, 210}, {0, 0, 0, 0}}, {{256, 256, 256, 204}, {0, 0, 0, 0}}, {{256, 256, 256, 197}, {0, 0, 0, 0}}, {{256, 256, 256, 190}, {0, 0, 0, 0}},
                    {{256, 256, 256, 183}, {0, 0, 0, 0}}, {{256, 256, 256, 176}, {0, 0, 0, 0}}, {{256, 256, 256, 168}, {0, 0, 0, 0}}, {{256, 256, 256, 160}, {0, 0, 0, 0}},
                    {{256, 256, 256, 152}, {0, 0, 0, 0}}, {{256, 256, 256, 144}, {0, 0, 0, 0}}, {{256, 256, 256, 135}, {0, 0, 0, 0}}, {{256, 256, 256, 126}, {0, 0, 0, 0}},
                    {{256, 256, 256, 117}, {0, 0, 0, 0}}, {{256, 256, 256, 108}, {0, 0, 0, 0}}, {{256, 256, 256, 98}, {0, 0, 0, 0}}, {{256, 256, 256, 88}, {0, 0, 0, 0}},
                    {{256, 256, 256, 78}, {0, 0, 0, 0}}, {{256, 256, 256, 68}, {0, 0, 0, 0}}, {{256, 256, 256, 57}, {0, 0, 0, 0}}, {{256, 256, 256, 46}, {0, 0, 0, 0}},
                    {{256, 256, 256, 35}, {0, 0, 0, 0}}, {{256, 256, 256, 24}, {0, 0, 0, 0}}, {{256, 256, 256, 12}, {0, 0, 0, 0}}, {{256, 256, 256, 0}, {0, 0, 0, 0}}}
    };

    private static final int MAX_FRAMES = 16;

    private final ArrayList<Creator> creatingFramesCounter = new ArrayList<>();

    private int frameCounter = 0;

    Petal(final Context context) {
        super(context, textureList, pivotList);
    }

    private int ConvertRange(
            final int originalStart, final int originalEnd, // original range
            final int newStart, final int newEnd, // desired range
            final int value // value to convert
    ) {
        final double scale = (double) (newEnd - newStart) / (originalEnd - originalStart);
        return (int) (newStart + ((value - originalStart) * scale));
    }

    private void addCreator() {
        if (creatingFramesCounter.size() == 10) return;

        final Creator creator = new Creator();
        creator._C = 0;
        creator._X = 120 + random.nextInt(160) - 80;
        creator._Y = 160 + random.nextInt(200) - 100;
        creator._Y = ConvertRange(0, 320, 0, height, creator._Y);
        creator._R = random.nextInt(360);
        creator._YS = random.nextInt(100) + 30;
        creator._XS = creator._YS;

        if (random.nextInt(2) == 0) creator._XS *= -1;
        creatingFramesCounter.add(creator);
    }

    private void creatorObjects() {
        final int creatingFramesCounterSize = creatingFramesCounter.size();
        for (int i = creatingFramesCounterSize - 1; i >= 0; i--) {
            Creator creator = creatingFramesCounter.get(i);
            creator._C++;
            switch (creator._C) {
                case 1:
                    createObject(creator, 0);
                    break;

                case 4:
                    createObject(creator, 1);
                    break;

                case 8:
                    createObject(creator, 2);
                    break;

                case 14:
                    createObject(creator, 3);
                    break;
            }

            if (creator._C < 15) creatingFramesCounter.set(i, creator);
            else creatingFramesCounter.remove(i);
        }
    }

    private void createObject(final Creator creator, final int index) {
        final int textureIndex = textureManager.getTextureIndex(textureList[0][0]);
        final Object object = objects.obtain(textureManager.getTexture(textureIndex), 1.0f);
        float svgScale = textureManager.dipToPixels(1);
        object.setObjectScale(1.0f / svgScale);
        object.resetViewMatrix();
        object.setViewTransform(startMatrixTransform[index]);
        object.setViewColorTransform(startColorTransform);
        object.setViewScale(creator._XS, creator._YS);
        object.setViewRotate(creator._R);
        object.setViewPosition(creator._X, creator._Y);
        object.frameCounter = 0;
        object.index = index < 2 ? 0 : 1;
    }

    void update(final boolean createObject) {
        frameCounter = (frameCounter + 1) % MAX_FRAMES;
        if (createObject && (frameCounter == 2)) addCreator();
        creatorObjects();

        final ReusableIterator<Object> iterator = objects.iterator();
        iterator.acquire();

        while (iterator.hasNext()) {
            final Object object = iterator.next();
            if (object.frameCounter < matrixTransform[object.index].length) {
                object.resetMatrix();
                object.setTexture(textureManager.getTexture(textureManager.getTextureIndex(spritesAnimation[object.index][object.frameCounter])), 1.0f);
                object.setTransform(matrixTransform[object.index][object.frameCounter]);
                object.setColorTransform(colorTransform[object.index][object.frameCounter]);
                object.frameCounter++;
            } else iterator.remove();
        }

        iterator.release();
    }

    private static final class Creator {
        public int _C, _X, _Y, _XS, _YS, _R;
    }
}
