package com.scrat.everchanging;

import android.content.Context;

import com.scrat.everchanging.util.ReusableIterator;

import java.util.Calendar;

public class FireFlie extends TextureObject {
    private final float[][] matrixTransform = {
            //scaleX, scaleY, rotateSkew0, rotateSkew1,translateX, translateY
            {1.0000f, 1.0000f, 0.0000f, 0.0000f, -33.1f, 26.2f},
            {0.9167f, 0.9167f, -0.07222f, 0.07222f, -46.05f, 18.4f},
            {0.8411f, 0.8411f, -0.08522f, 0.08522f, -57.4f, 10.6f},
            {0.7774f, 0.7774f, 0.02083f, -0.02083f, -66.75f, 1.6f},
            {0.7119f, 0.7119f, 0.07489f, -0.07489f, -73.4f, -8.3f},
            {0.6309f, 0.6309f, 0.1933f, -0.1933f, -77.85f, -17.9f},
            {0.3595f, 0.3595f, 0.493f, -0.493f, -76.75f, -27f},
            {0.1403f, 0.1403f, 0.5498f, -0.5498f, -71.05f, -33.35f},
            {0.06506f, 0.06506f, 0.5266f, -0.5266f, -64.9f, -37.15f},
            {0.02617f, 0.02617f, 0.4993f, -0.4993f, -59.5f, -39.4f},
            {-0.002625f, -0.002625f, 0.5191f, -0.5191f, -55.75f, -40.55f},
            {-0.04733f, -0.04733f, 0.5386f, -0.5386f, -51.45f, -41.4f},
            {-0.1081f, -0.1081f, 0.5542f, -0.5542f, -46.6f, -41.65f},
            {-0.1855f, -0.1855f, 0.5614f, -0.5614f, -41.15f, -41.1f},
            {-0.2702f, -0.2702f, 0.5585f, -0.5585f, -35.4f, -39.55f},
            {-0.3191f, -0.3191f, 0.5687f, -0.5687f, -29.55f, -36.55f},
            {-0.2096f, -0.2096f, 0.6541f, -0.6541f, -23.25f, -33.9f},
            {-0.00386f, -0.00386f, 0.7244f, -0.7244f, -16.1f, -32.15f},
            {0.3324f, 0.3324f, 0.6868f, -0.6868f, -8.15f, -32.85f},
            {0.611f, 0.611f, 0.5238f, -0.5238f, -0.7f, -36.85f},
            {0.841f, 0.841f, 0.1258f, -0.1258f, 5.2f, -43.4f},
            {0.8653f, 0.8653f, -0.2371f, 0.2371f, 6.75f, -52.9f},
            {0.9111f, 0.9111f, -0.2577f, 0.2577f, 8.35f, -63.1f},
            {1.0000f, 1.0000f, 0.0000f, 0.0000f, 11.7f, -73.15f},
            {0.9567f, 0.9567f, 0.0000f, 0.0000f, 21.05f, -82.05f},
            {0.9152f, 0.9152f, 0.0000f, 0.0000f, 31.9f, -88.15f},
            {0.8754f, 0.8754f, 0.0000f, 0.0000f, 43.35f, -91.6f},
            {0.8374f, 0.8374f, 0.0000f, 0.0000f, 54.8f, -92.6f},
            {0.801f, 0.801f, 0.0000f, 0.0000f, 65.65f, -91.45f},
            {0.7664f, 0.7664f, 0.0000f, 0.0000f, 74.45f, -86.1f},
            {0.7336f, 0.7336f, 0.0000f, 0.0000f, 79.85f, -77.85f},
            {0.7024f, 0.7024f, 0.0000f, 0.0000f, 82.65f, -68.9f},
            {0.673f, 0.673f, 0.0000f, 0.0000f, 83.25f, -60.05f},
            {0.6453f, 0.6453f, 0.0000f, 0.0000f, 82.1f, -51.75f},
            {0.6194f, 0.6194f, 0.0000f, 0.0000f, 80.6f, -44.25f},
            {0.5952f, 0.5952f, 0.0000f, 0.0000f, 79.25f, -37.35f},
            {0.5727f, 0.5727f, 0.0000f, 0.0000f, 78f, -30.85f},
            {0.5519f, 0.5519f, 0.0000f, 0.0000f, 76.95f, -24.85f},
            {0.5329f, 0.5329f, 0.0000f, 0.0000f, 76.1f, -19.3f},
            {0.5156f, 0.5156f, 0.0000f, 0.0000f, 75.55f, -14.4f},
            {0.5f, 0.5f, 0.0000f, 0.0000f, 76.6f, -9.95f},
            {0.5156f, 0.5156f, 0.0000f, 0.0000f, 78.25f, -7.45f},
            {0.5329f, 0.5329f, 0.0000f, 0.0000f, 80.65f, -5f},
            {0.5519f, 0.5519f, 0.0000f, 0.0000f, 83.45f, -2.5f},
            {0.5727f, 0.5727f, 0.0000f, 0.0000f, 86.7f, 0.05f},
            {0.5952f, 0.5952f, 0.0000f, 0.0000f, 90.4f, 2.55f},
            {0.6194f, 0.6194f, 0.0000f, 0.0000f, 94.6f, 4.9f},
            {0.6453f, 0.6453f, 0.0000f, 0.0000f, 99.3f, 7.05f},
            {0.673f, 0.673f, 0.0000f, 0.0000f, 104.55f, 8.85f},
            {0.7024f, 0.7024f, 0.0000f, 0.0000f, 110.2f, 10.3f},
            {0.7336f, 0.7336f, 0.0000f, 0.0000f, 116.35f, 11.25f},
            {0.7664f, 0.7664f, 0.0000f, 0.0000f, 122.75f, 11.85f},
            {0.8011f, 0.8011f, 0.0000f, 0.0000f, 129.2f, 13.35f},
            {0.8374f, 0.8374f, 0.0000f, 0.0000f, 135.05f, 17.2f},
            {0.8754f, 0.8754f, 0.0000f, 0.0000f, 138f, 24.15f},
            {0.9152f, 0.9152f, 0.0000f, 0.0000f, 137.4f, 32.1f},
            {0.9568f, 0.9568f, 0.0000f, 0.0000f, 133.7f, 39.4f},
            {1.0000f, 1.0000f, 0.0000f, 0.0000f, 127.8f, 45.6f},
            {0.9726f, 0.9726f, 0.0000f, 0.0000f, 122.05f, 50.7f},
            {0.9458f, 0.9458f, 0.0000f, 0.0000f, 116f, 55.1f},
            {0.9198f, 0.9198f, 0.0000f, 0.0000f, 109.75f, 58.9f},
            {0.8944f, 0.8944f, 0.0000f, 0.0000f, 103.35f, 62.1f},
            {0.8697f, 0.8697f, 0.0000f, 0.0000f, 96.9f, 64.7f},
            {0.8457f, 0.8457f, 0.0000f, 0.0000f, 90.5f, 66.75f},
            {0.8224f, 0.8224f, 0.0000f, 0.0000f, 84.2f, 67.95f},
            {0.7997f, 0.7997f, 0.0000f, 0.0000f, 77.95f, 68.25f},
            {0.7778f, 0.7778f, 0.0000f, 0.0000f, 71.85f, 67.45f},
            {0.7565f, 0.7565f, 0.0000f, 0.0000f, 66.15f, 65.6f},
            {0.7359f, 0.7359f, 0.0000f, 0.0000f, 61f, 62.85f},
            {0.716f, 0.716f, 0.0000f, 0.0000f, 56.5f, 59.45f},
            {0.6969f, 0.6969f, 0.0000f, 0.0000f, 52.65f, 55.6f},
            {0.6783f, 0.6783f, 0.0000f, 0.0000f, 49.35f, 51.6f},
            {0.6605f, 0.6605f, 0.0000f, 0.0000f, 46.15f, 47.8f},
            {0.6434f, 0.6434f, 0.0000f, 0.0000f, 42.9f, 44.3f},
            {0.6269f, 0.6269f, 0.0000f, 0.0000f, 39.6f, 41.15f},
            {0.6111f, 0.6111f, 0.0000f, 0.0000f, 36.2f, 38.3f},
            {0.596f, 0.596f, 0.0000f, 0.0000f, 32.8f, 35.8f},
            {0.5816f, 0.5816f, 0.0000f, 0.0000f, 29.4f, 33.6f},
            {0.5679f, 0.5679f, 0.0000f, 0.0000f, 26.05f, 31.7f},
            {0.5549f, 0.5549f, 0.0000f, 0.0000f, 22.8f, 30.05f},
            {0.5425f, 0.5425f, 0.0000f, 0.0000f, 19.6f, 28.65f},
            {0.5309f, 0.5309f, 0.0000f, 0.0000f, 16.55f, 27.5f},
            {0.5199f, 0.5199f, 0.0000f, 0.0000f, 13.6f, 26.55f},
            {0.5096f, 0.5096f, 0.0000f, 0.0000f, 10.85f, 25.8f},
            {0.5f, 0.5f, 0.0000f, 0.0000f, 8.2f, 25.3f}
    };
    private final float[][][] colorTransform = {
            //redMultiTerm, greenMultiTerm, blueMultiTerm, alphaMultiTerm
            {{256,256,256,0},{0,0,0,0}},            {{256,256,256,21},{0,0,0,0}},
            {{256,256,256,40},{0,0,0,0}},            {{256,256,256,58},{0,0,0,0}},
            {{256,256,256,74},{0,0,0,0}},            {{256,256,256,89},{0,0,0,0}},
            {{256,256,256,102},{0,0,0,0}},            {{256,256,256,113},{0,0,0,0}},
            {{256,256,256,123},{0,0,0,0}},            {{256,256,256,131},{0,0,0,0}},
            {{256,256,256,136},{0,0,0,0}},            {{256,256,256,141},{0,0,0,0}},
            {{256,256,256,147},{0,0,0,0}},            {{256,256,256,154},{0,0,0,0}},
            {{256,256,256,161},{0,0,0,0}},            {{256,256,256,169},{0,0,0,0}},
            {{256,256,256,178},{0,0,0,0}},            {{256,256,256,187},{0,0,0,0}},
            {{256,256,256,197},{0,0,0,0}},            {{256,256,256,208},{0,0,0,0}},
            {{256,256,256,219},{0,0,0,0}},            {{256,256,256,230},{0,0,0,0}},
            {{256,256,256,243},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,256},{0,0,0,0}},            {{256,256,256,256},{0,0,0,0}},
            {{256,256,256,242},{0,0,0,0}},            {{256,256,256,228},{0,0,0,0}},
            {{256,256,256,215},{0,0,0,0}},            {{256,256,256,202},{0,0,0,0}},
            {{256,256,256,189},{0,0,0,0}},            {{256,256,256,177},{0,0,0,0}},
            {{256,256,256,165},{0,0,0,0}},            {{256,256,256,153},{0,0,0,0}},
            {{256,256,256,142},{0,0,0,0}},            {{256,256,256,131},{0,0,0,0}},
            {{256,256,256,121},{0,0,0,0}},            {{256,256,256,111},{0,0,0,0}},
            {{256,256,256,101},{0,0,0,0}},            {{256,256,256,91},{0,0,0,0}},
            {{256,256,256,82},{0,0,0,0}},            {{256,256,256,73},{0,0,0,0}},
            {{256,256,256,65},{0,0,0,0}},            {{256,256,256,57},{0,0,0,0}},
            {{256,256,256,49},{0,0,0,0}},            {{256,256,256,42},{0,0,0,0}},
            {{256,256,256,35},{0,0,0,0}},            {{256,256,256,28},{0,0,0,0}},
            {{256,256,256,22},{0,0,0,0}},            {{256,256,256,16},{0,0,0,0}},
            {{256,256,256,10},{0,0,0,0}},            {{256,256,256,5},{0,0,0,0}},
            {{256,256,256,0},{0,0,0,0}}
    };
    int numClips = minObjects;
    int frameCounter = 0;
    int maxFrames = 6;
    boolean init = false;

    private final Calendar calendar;

    static final String[][] textureList = {{"image_168","image_170"}};
    static final float[][] pivotList = {{7.5f, 7.5f},{7.5f, 7.5f}};

    public FireFlie(final Context context, final Calendar calendar) {
        super(context, textureList, pivotList);
        this.calendar = calendar;
    }

    void createObject() {
        if (objects.objectsInUseCount() >= numClips) return;

        TextureManager.Texture texture = textureManager.getTexture(textureManager.getTextureIndex(textureList[0][random.nextInt(2)]));
        Object object = objects.obtain(texture, 1.0f);
        texture.width = 15.0f;
        texture.height = 15.0f;

        float _x = random.nextInt(width);
        float _y = random.nextInt(100) + 150;
        int _rotation = random.nextInt(20) - 10;
        int _yscale = random.nextInt(90) + 10;
        int _xscale = _yscale;
        if (random.nextInt(2) == 0 ) _xscale *= -1;
        if (random.nextInt(2) == 0 ) _yscale *= -1;
        object.setViewScale(_xscale, _yscale);
        object.setViewRotate(_rotation);
        object.setViewPosition(_x, height - 320 + _y);
        object.setColorTransform(colorTransform[0]);
        object.frameCounter = 0;
    }

    void resetObject(Object object) {
        object.frameCounter = 0;
        int textureIndex = textureManager.getTextureIndex(textureList[0][random.nextInt(2)]);
        object.setTexture(textureManager.getTexture(textureIndex), 1.0f);
        float x = random.nextInt(width);
        float y = random.nextInt(100) + 150;
        int r = random.nextInt(20) - 10;
        int sy = random.nextInt(90) + 10;
        int sx = sy;
        if (random.nextInt(2) == 0 ) sx *= -1;
        if (random.nextInt(2) == 0 ) sy *= -1;
        object.resetViewMatrix();
        object.resetMatrix();
        object.setColorTransform(colorTransform[0]);
        object.setViewScale(sx, sy);
        object.setViewRotate(r);
        object.setViewPosition(x, height - 320 + y);
        object.frameCounter = 0;
    }

    private boolean get2501() {
        int currentMonth = calendar.get(Calendar.MONTH) + 1;
        int currentDay = calendar.get(Calendar.DAY_OF_MONTH);
        return (currentMonth==1) && (currentDay==25);
    }

    public void update(boolean createObject) {
        frameCounter = (frameCounter+1) % maxFrames;
        if (!init && createObject)  numClips = get2501()?maxObjects:(minObjects + random.nextInt(maxObjects - 4));
        init = createObject;
        if (createObject && frameCounter==2) createObject();

        final ReusableIterator<Object> iterator = objects.iterator();
        iterator.acquire();

        while (iterator.hasNext()) {
            final Object object = iterator.next();
            if (object.frameCounter < matrixTransform.length) {
                object.resetMatrix();
                object.setColorTransform(colorTransform[object.frameCounter]);
                object.setTransform(matrixTransform[object.frameCounter]);
                object.frameCounter++;
            } else {
                if (createObject) resetObject(object);
                else iterator.remove();
            }
        }

        iterator.release();
    }
}
